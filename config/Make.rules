# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Define OPTIMIZE as yes if you want to build with
# optimization. Otherwise Ice is build with debug information.
#
#OPTIMIZE		= yes

#
# Define LP64 as yes or no if you want force a 32 or 64 bit. The
# default is platform-dependent
#
#LP64			?= yes

#
# Define CPP11 as yes if you want to enable C++11 features in GCC or 
# Clang.
#
#CPP11     ?= yes

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Compile scanner and grammar files?
#
#BISON_FLEX ?= yes

#
# Common definitions
#
ice_language     = cpp
slice_translator = slice2cpp

include $(top_srcdir)/config/Make.common.rules

includedir		= $(ice_cpp_dir)/include

#
# Embed the runpath if ICE_HOME is defined, otherwise the install
# is /usr or /usr/local.
#
ifneq ($(ICE_HOME),)
    embedded_runpath = yes
endif


#
# Platform specific definitions
#
include	 $(top_srcdir)/config/Make.rules.$(UNAME)

ICECPPFLAGS		= -I$(slicedir)

SLICE2CPPFLAGS		= $(ICECPPFLAGS)

ifeq ($(ice_dir), $(usr_dir)) 
    LDFLAGS	= $(LDPLATFORMFLAGS) $(CXXFLAGS)
    ifeq ($(CPP11),yes)
        LDFLAGS = $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(ice_lib_dir)
    endif
else
    CPPFLAGS	+= -I$(includedir)
    LDFLAGS	= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(ice_lib_dir)
endif

ifeq ($(FLEX_NOLINE),yes)
    FLEXFLAGS	       := -L
else
    FLEXFLAGS	       :=
endif

ifeq ($(BISON_NOLINE),yes)
    BISONFLAGS		:= -dvtl
else
    BISONFLAGS		:= -dvt
endif

ifeq ($(mkshlib),)
    $(error You need to define mkshlib in Make.rules.$(UNAME)) 
endif


SLICEPARSERLIB  = $(ice_lib_dir)/$(subst $(cpp11libsuffix),,$(call mklibfilename,Slice,$(VERSION)))
SLICE2CPP	= $(ice_bin_dir)/slice2cpp
SLICE2FREEZE	= $(ice_bin_dir)/slice2freeze

EVERYTHING		= all clean
EVERYTHING_EXCEPT_ALL   = clean

.SUFFIXES:
.SUFFIXES:		.cpp .c .o

ifneq ($(SLICE_OBJS),)
-include $(addprefix .depend/, $(SLICE_OBJS:.o=.ice.d))
endif

#
# If dependencies haven't been created yet make all OBJS depend on all
# SRCS, Slice generated files will be created before C++ compilation
# starts. This prevents issues parallel make.
#
ifneq ($(OBJS),)

ifeq ($(wildcard .depend/*.d),)

$(OBJS):$(OBJS:.o=.cpp)

else

-include $(addprefix .depend/, $(OBJS:.o=.d))

#
# OBJS depend on the non existing sources so generated files are created
# before compilation takes place.
#
$(OBJS):$(filter-out $(wildcard $(OBJS:.o=.cpp)) ,$(OBJS:.o=.cpp))

clean::
	rm -rf .depend
endif

endif

.cpp.o:
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<
	@mkdir -p .depend
	@$(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $< | sed 's/$(subst /,\/,$(includedir))/$$\(includedir\)/' > .depend/$(*F).d

.c.o:
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $<

%.h %.cpp: %.ice $(SLICE2CPP) $(SLICEPARSERLIB)
	rm -f $(*F).h $(*F).cpp
	$(SLICE2CPP) $(SLICE2CPPFLAGS) $(*F).ice
	@touch $(*F).cpp
	@mkdir -p .depend
	@$(SLICE2CPP) $(SLICE2CPPFLAGS) --depend $(*F).ice > .depend/$(*F).ice.d

ifeq ($(BISON_FLEX),yes)

%.h %.cpp: %.y
	rm -f $(*F).h $(*F).cpp
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).cpp
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.cpp: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	echo '#include <IceUtil/Config.h>' > $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

endif

all:: $(SRCS) $(TARGETS)

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak
	-rm -rf .depend

ifneq ($(SLICE_OBJS),)
clean::
	rm -f $(addsuffix .cpp, $(basename $(notdir $(SLICE_OBJS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_OBJS))))
endif
