# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Define OPTIMIZE as yes if you want to build with
# optimization. Otherwise Ice is build with debug information.
#
#OPTIMIZE		= yes

#
# The build architectures for gcc/llvm based builds. The format of
# these build flags are OS dependent. For example, under OS X to
# build binaries which support both i386 and x86_64 you would use
# "-arch i386 -arch x86_64".  The default is OS version dependent. Be
# aware that this value may conflict with the setting of LP64 above.
#
#OBJCARCHFLAGS		     = -arch i386 -arch x86_64

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = objc
slice_translator = slice2objc

include $(top_srcdir)/config/Make.common.rules

#
# Embed the runpath if ICE_HOME is defined, otherwise the install
# is /usr or /usr/local.
#
ifneq ($(ICE_HOME),)
    embedded_runpath = yes
endif


ifdef ice_src_dist
    ice_objc_dir = $(ice_dir)/objc
else
    ice_objc_dir = $(ice_dir)
endif

libdir	        = $(ice_objc_dir)/lib
includedir	= $(ice_objc_dir)/include

#
# This file is included by Make.rules when uname is Darwin.
#

OSX_TARGET_MIN_SDK_VERSION = 10.9

CC     = xcrun clang
CXX    = xcrun clang++

CPPFLAGS		+= -pthread -fvisibility=hidden
OBJCFLAGS		+= -Wall -Werror -mmacosx-version-min=$(OSX_TARGET_MIN_SDK_VERSION)


#
# By default we build x86_64 binaries.
#
ifeq ($(OBJCARCHFLAGS),)
OBJCARCHFLAGS    := -arch x86_64
endif

ifeq ($(OPTIMIZE),yes)
     OBJCFLAGS		:= $(OBJCARCHFLAGS) -O2 -DNDEBUG $(OBJCFLAGS)
else
     OBJCFLAGS		:= $(OBJCARCHFLAGS) -g $(OBJCFLAGS)
endif

#
# If embedded_runpath is not set to yes we do not add
# an rpath dir.
#
ifeq ($(embedded_runpath),yes)
    LDEXEFLAGS		= -Wl,-rpath,$(libdir)
endif

#
# Enable ARC for targets in demo/ and test/ subdirectories
# when COMPILE_WITH_ARC is defined.
#
ifneq ($(findstring demo/,${CURDIR}),)
    TARGET_SUPPORT_ARC 	= yes
endif

ifneq ($(findstring test/,${CURDIR}),)
    TARGET_SUPPORT_ARC 	= yes
endif

ifeq ($(TARGET_SUPPORT_ARC),yes)
    ifeq ($(COMPILE_WITH_ARC),yes)
        #
        # Don't add these to OBJCFLAGS flex and bison generated files used in
        # some demos doesn't support ARC.
        #
        ARCFLAGS = -fobjc-arc -fobjc-arc-exceptions
    endif
endif

mklib 		= libtool -static -o $(1) $(2)
mkshlib		= $(CXX)  -dynamiclib $(LDFLAGS) -o $(1) -install_name @rpath/$(2) $(3) $(4)

BASELIBS	= -L$(ice_cpp_dir)/$(libsubdir) -lIce -lIceUtil -framework Foundation
LIBS		= -lIceObjC$(libsuffix) -framework Foundation
ICESSL_LIBS     = -lIceSSLObjC$(libsuffix)
TEST_LIBS	= -lTestCommon $(LIBS)
ICECPPFLAGS	= -I$(slicedir)
SLICE2OBJCFLAGS	= $(ICECPPFLAGS)
FLEXFLAGS	=
BISONFLAGS	= -dvt
CPPFLAGS	+= -I$(includedir)
LDFLAGS		= $(OBJCFLAGS) -L$(libdir) 

SLICE2OBJC	= $(ice_bin_dir)/slice2objc

# This cannot use .cpp:.o as we have multiple types of source files.

EVERYTHING		= all clean
EVERYTHING_EXCEPT_ALL   = clean

.SUFFIXES:
.SUFFIXES:		.mm .m .o .cpp  .c

ifneq ($(SLICE_OBJS),)
-include $(addprefix .depend/, $(SLICE_OBJS:.o=.ice.d))
endif

ifneq ($(OBJS),)
-include $(addprefix .depend/, $(OBJS:.o=.d))
endif

ifeq ($(wildcard .depend/*.d),)
ifneq ($(OBJCXX_OBJS),)
$(OBJS): $(SLICE_OBJS:.o=.m) $(OBJC_OBJS:.o=.m) $(OBJCXX_OBJS:.o=.mm)
else
$(OBJS): $(OBJS:.o=.m)
endif
endif

all:: $(TARGETS)

.m.o:
	$(CC) -c $(ARCFLAGS) $(CPPFLAGS) $(OBJCFLAGS) $<
	@mkdir -p .depend
	@$(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $< | sed 's/$(subst /,\/,$(includedir))/$$\(includedir\)/' > .depend/$(*F).d

.mm.o:
	$(CXX) -c $(ARCFLAGS) $(CPPFLAGS) $(OBJCFLAGS) $<
	@mkdir -p .depend
	@$(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $< > .depend/$(*F).d

$(HDIR)/%F.h: $(SDIR)/%F.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F)F.h $(*F)F.m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F)F.h $(HDIR)
	@touch $(*F)F.m
	@mkdir -p .depend
	@$(SLICE2OBJC) $(SLICE2OBJCFLAGS) --depend $< | $(ice_dir)/config/makedepend.py "\$$(HDIR)/" > .depend/$(*F)F.ice.d

$(HDIR)/%.h %.m: $(SDIR)/%.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F).h $(HDIR)
	@touch $(*F).m
	@mkdir -p .depend
	@$(SLICE2OBJC) $(SLICE2OBJCFLAGS) --depend $< | $(ice_dir)/config/makedepend.py "\$$(HDIR)/" > .depend/$(*F).ice.d

%.h %.m: %.ice $(SLICE2OBJC)
	rm -f $(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	@touch $(*F).m
	@mkdir -p .depend
	@$(SLICE2OBJC) $(SLICE2OBJCFLAGS) --depend $(*F).ice > .depend/$(*F).ice.d

ifeq ($(BISON_FLEX),yes)
%.h %.m: %.y
	rm -f $(*F).h $(*F).c
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).m
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.m: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c
endif

clean::
	-rm -f $(TARGETS)
	-rm -f core *.o *.bak
	-rm -rf .depend

ifneq ($(SLICE_OBJS),)
clean::
	rm -f $(addsuffix .m, $(basename $(notdir $(SLICE_OBJS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_OBJS))))
endif

ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR)/, $(addsuffix .h, $(basename $(SLICE_OBJS))))
endif
