// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7a4
//
// <auto-generated>
//
// Generated from file `Calculator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Serializable]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DivideByZeroException : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public DivideByZeroException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public DivideByZeroException(_System.Exception ex) : base(ex)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public DivideByZeroException(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override string ice_id()
        {
            return "::Demo::DivideByZeroException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Demo::DivideByZeroException");
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            DivideByZeroException o = other as DivideByZeroException;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public static bool operator==(DivideByZeroException lhs, DivideByZeroException rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public static bool operator!=(DivideByZeroException lhs, DivideByZeroException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Demo::DivideByZeroException", -1, true);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Serializable]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NegativeRootException : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public NegativeRootException()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public NegativeRootException(_System.Exception ex) : base(ex)
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public NegativeRootException(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override string ice_id()
        {
            return "::Demo::NegativeRootException";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Demo::NegativeRootException");
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            NegativeRootException o = other as NegativeRootException;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public static bool operator==(NegativeRootException lhs, NegativeRootException rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        public static bool operator!=(NegativeRootException lhs, NegativeRootException rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::Demo::NegativeRootException", -1, true);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Calculator : Ice.Object, CalculatorOperations_
    {
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_add(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_subtract(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_divide(int ret, int remainder);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_square(int ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_squareRoot(double ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public delegate void Callback_Calculator_shutdown();
}

namespace Demo
{
    public struct Calculator_DivideResult
    {
        public Calculator_DivideResult(int returnValue, int remainder)
        {
            this.returnValue = returnValue;
            this.remainder = remainder;
        }

        public int returnValue;
        public int remainder;
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public interface CalculatorPrx : Ice.ObjectPrx
    {
        int add(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> addAsync(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_add> begin_add(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_add(int x, int y, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_add(int x, int y, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_add(Ice.AsyncResult asyncResult);

        int subtract(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> subtractAsync(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_subtract> begin_subtract(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_subtract(int x, int subtrahend, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_subtract(int x, int subtrahend, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_subtract(Ice.AsyncResult asyncResult);

        int divide(int numerator, int denominator, out int remainder, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Demo.Calculator_DivideResult> divideAsync(int numerator, int denominator, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_divide> begin_divide(int numerator, int denominator, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_divide(int numerator, int denominator, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_divide(int numerator, int denominator, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_divide(out int remainder, Ice.AsyncResult asyncResult);

        int square(int x, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<int> squareAsync(int x, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_square> begin_square(int x, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_square(int x, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_square(int x, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        int end_square(Ice.AsyncResult asyncResult);

        double squareRoot(int x, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<double> squareRootAsync(int x, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_squareRoot> begin_squareRoot(int x, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_squareRoot(int x, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_squareRoot(int x, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        double end_squareRoot(Ice.AsyncResult asyncResult);

        void shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_Calculator_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_shutdown(Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public interface CalculatorOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        int add(int x, int y, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        int subtract(int x, int subtrahend, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        int divide(int numerator, int denominator, out int remainder, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        int square(int x, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        double squareRoot(int x, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
        void shutdown(Ice.Current current = null);
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    [_System.Serializable]
    public sealed class CalculatorPrxHelper : Ice.ObjectPrxHelperBase, CalculatorPrx
    {
        public CalculatorPrxHelper()
        {
        }

        public CalculatorPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public int add(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_addAsync(x, y, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int divide(int numerator, int denominator, out int remainder, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                var result_ = _iceI_divideAsync(numerator, denominator, context, null, _System.Threading.CancellationToken.None, true).Result;
                remainder = result_.remainder;
                return result_.returnValue;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_shutdownAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int square(int x, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_squareAsync(x, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public double squareRoot(int x, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_squareRootAsync(x, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int subtract(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_subtractAsync(x, subtrahend, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<int> addAsync(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_addAsync(x, y, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_addAsync(int iceP_x, int iceP_y, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_add(iceP_x, iceP_y, context, synchronous, completed);
            return completed.Task;
        }

        private const string _add_name = "add";

        private void _iceI_add(int iceP_x, int iceP_y, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            iceCheckAsyncTwowayOnly(_add_name);
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _add_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_x);
                    ostr.writeInt(iceP_y);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<Demo.Calculator_DivideResult> divideAsync(int numerator, int denominator, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_divideAsync(numerator, denominator, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Demo.Calculator_DivideResult> _iceI_divideAsync(int iceP_numerator, int iceP_denominator, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<Demo.Calculator_DivideResult>(progress, cancel);
            _iceI_divide(iceP_numerator, iceP_denominator, context, synchronous, completed);
            return completed.Task;
        }

        private const string _divide_name = "divide";

        private void _iceI_divide(int iceP_numerator, int iceP_denominator, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            iceCheckAsyncTwowayOnly(_divide_name);
            var outAsync = getOutgoingAsync<Demo.Calculator_DivideResult>(completed);
            outAsync.invoke(
                _divide_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_numerator);
                    ostr.writeInt(iceP_denominator);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(Demo.DivideByZeroException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    Demo.Calculator_DivideResult ret = new Demo.Calculator_DivideResult();
                    ret.remainder = istr.readInt();
                    ret.returnValue = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task shutdownAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_shutdownAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_shutdownAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_shutdown(context, synchronous, completed);
            return completed.Task;
        }

        private const string _shutdown_name = "shutdown";

        private void _iceI_shutdown(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _shutdown_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task<int> squareAsync(int x, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_squareAsync(x, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_squareAsync(int iceP_x, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_square(iceP_x, context, synchronous, completed);
            return completed.Task;
        }

        private const string _square_name = "square";

        private void _iceI_square(int iceP_x, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            iceCheckAsyncTwowayOnly(_square_name);
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _square_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_x);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<double> squareRootAsync(int x, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_squareRootAsync(x, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<double> _iceI_squareRootAsync(int iceP_x, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
            _iceI_squareRoot(iceP_x, context, synchronous, completed);
            return completed.Task;
        }

        private const string _squareRoot_name = "squareRoot";

        private void _iceI_squareRoot(int iceP_x, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            iceCheckAsyncTwowayOnly(_squareRoot_name);
            var outAsync = getOutgoingAsync<double>(completed);
            outAsync.invoke(
                _squareRoot_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_x);
                },
                userException: (Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(Demo.NegativeRootException)
                    {
                        throw;
                    }
                    catch(Ice.UserException)
                    {
                    }
                },
                read: (Ice.InputStream istr) =>
                {
                    double ret;
                    ret = istr.readDouble();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<int> subtractAsync(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_subtractAsync(x, subtrahend, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<int> _iceI_subtractAsync(int iceP_x, int iceP_subtrahend, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_subtract(iceP_x, iceP_subtrahend, context, synchronous, completed);
            return completed.Task;
        }

        private const string _subtract_name = "subtract";

        private void _iceI_subtract(int iceP_x, int iceP_subtrahend, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            iceCheckAsyncTwowayOnly(_subtract_name);
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _subtract_name,
                Ice.OperationMode.Idempotent,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_x);
                    ostr.writeInt(iceP_subtrahend);
                },
                read: (Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_Calculator_add> begin_add(int x, int y, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_add(x, y, context, null, null, false);
        }

        public Ice.AsyncResult begin_add(int x, int y, Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(x, y, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_add(int x, int y, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_add(x, y, context, callback, cookie, false);
        }

        public int end_add(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _add_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_add> begin_add(int iceP_x, int iceP_y, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_add, int>(
                (Demo.Callback_Calculator_add cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _add_name, cookie, completedCallback);
            _iceI_add(iceP_x, iceP_y, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_Calculator_divide> begin_divide(int numerator, int denominator, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_divide(numerator, denominator, context, null, null, false);
        }

        public Ice.AsyncResult begin_divide(int numerator, int denominator, Ice.AsyncCallback callback, object cookie)
        {
            return begin_divide(numerator, denominator, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_divide(int numerator, int denominator, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_divide(numerator, denominator, context, callback, cookie, false);
        }

        public int end_divide(out int remainder, Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _divide_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Demo.Calculator_DivideResult>)resultI_.OutgoingAsync;
            var result_ = outgoing_.getResult(resultI_.wait());
            remainder = result_.remainder;
            return result_.returnValue;
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_divide> begin_divide(int iceP_numerator, int iceP_denominator, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_divide, Demo.Calculator_DivideResult>(
                (Demo.Callback_Calculator_divide cb, Demo.Calculator_DivideResult ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret.returnValue, ret.remainder);
                    }
                },
                this, _divide_name, cookie, completedCallback);
            _iceI_divide(iceP_numerator, iceP_denominator, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_Calculator_shutdown> begin_shutdown(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_shutdown(context, null, null, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_shutdown(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_shutdown(context, callback, cookie, false);
        }

        public void end_shutdown(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _shutdown_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_shutdown, object>(
                (Demo.Callback_Calculator_shutdown cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _shutdown_name, cookie, completedCallback);
            _iceI_shutdown(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_Calculator_square> begin_square(int x, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_square(x, context, null, null, false);
        }

        public Ice.AsyncResult begin_square(int x, Ice.AsyncCallback callback, object cookie)
        {
            return begin_square(x, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_square(int x, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_square(x, context, callback, cookie, false);
        }

        public int end_square(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _square_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_square> begin_square(int iceP_x, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_square, int>(
                (Demo.Callback_Calculator_square cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _square_name, cookie, completedCallback);
            _iceI_square(iceP_x, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_Calculator_squareRoot> begin_squareRoot(int x, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_squareRoot(x, context, null, null, false);
        }

        public Ice.AsyncResult begin_squareRoot(int x, Ice.AsyncCallback callback, object cookie)
        {
            return begin_squareRoot(x, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_squareRoot(int x, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_squareRoot(x, context, callback, cookie, false);
        }

        public double end_squareRoot(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _squareRoot_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_squareRoot> begin_squareRoot(int iceP_x, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_squareRoot, double>(
                (Demo.Callback_Calculator_squareRoot cb, double ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _squareRoot_name, cookie, completedCallback);
            _iceI_squareRoot(iceP_x, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Demo.Callback_Calculator_subtract> begin_subtract(int x, int subtrahend, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_subtract(x, subtrahend, context, null, null, false);
        }

        public Ice.AsyncResult begin_subtract(int x, int subtrahend, Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(x, subtrahend, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_subtract(int x, int subtrahend, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_subtract(x, subtrahend, context, callback, cookie, false);
        }

        public int end_subtract(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _subtract_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_Calculator_subtract> begin_subtract(int iceP_x, int iceP_subtrahend, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_Calculator_subtract, int>(
                (Demo.Callback_Calculator_subtract cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _subtract_name, cookie, completedCallback);
            _iceI_subtract(iceP_x, iceP_subtrahend, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CalculatorPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CalculatorPrxHelper h = new CalculatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalculatorPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CalculatorPrxHelper h = new CalculatorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CalculatorPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CalculatorPrx r = b as CalculatorPrx;
            if(r == null)
            {
                CalculatorPrxHelper h = new CalculatorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CalculatorPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CalculatorPrxHelper h = new CalculatorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::Calculator",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, CalculatorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CalculatorPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CalculatorPrxHelper result = new CalculatorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7a4")]
    public abstract class CalculatorDisp_ : Ice.ObjectImpl, Calculator
    {
        #region Slice operations

        public abstract int add(int x, int y, Ice.Current current = null);

        public abstract int subtract(int x, int subtrahend, Ice.Current current = null);

        public abstract int divide(int numerator, int denominator, out int remainder, Ice.Current current = null);

        public abstract int square(int x, Ice.Current current = null);

        public abstract double squareRoot(int x, Ice.Current current = null);

        public abstract void shutdown(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids = 
        {
            "::Demo::Calculator",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_add(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_x;
            int iceP_y;
            iceP_x = istr.readInt();
            iceP_y = istr.readInt();
            inS.endReadParams();
            var ret = obj.add(iceP_x, iceP_y, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_subtract(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_x;
            int iceP_subtrahend;
            iceP_x = istr.readInt();
            iceP_subtrahend = istr.readInt();
            inS.endReadParams();
            var ret = obj.subtract(iceP_x, iceP_subtrahend, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_divide(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_numerator;
            int iceP_denominator;
            iceP_numerator = istr.readInt();
            iceP_denominator = istr.readInt();
            inS.endReadParams();
            int iceP_remainder;
            var ret = obj.divide(iceP_numerator, iceP_denominator, out iceP_remainder, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(iceP_remainder);
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_square(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_x;
            iceP_x = istr.readInt();
            inS.endReadParams();
            var ret = obj.square(iceP_x, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_squareRoot(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
            var istr = inS.startReadParams();
            int iceP_x;
            iceP_x = istr.readInt();
            inS.endReadParams();
            var ret = obj.squareRoot(iceP_x, current);
            var ostr = inS.startWriteParams();
            ostr.writeDouble(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_shutdown(Calculator obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.shutdown(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "add",
            "divide",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "shutdown",
            "square",
            "squareRoot",
            "subtract"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_add(this, inS, current);
                }
                case 1:
                {
                    return iceD_divide(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_shutdown(this, inS, current);
                }
                case 7:
                {
                    return iceD_square(this, inS, current);
                }
                case 8:
                {
                    return iceD_squareRoot(this, inS, current);
                }
                case 9:
                {
                    return iceD_subtract(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
